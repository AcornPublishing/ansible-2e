[[IAM]]
[appendix]
== Using IAM Roles for EC2 Credentials

If you're going to run Ansible inside a VPC, you can take advantage of
Amazon's Identity and Access Management (IAM) roles so that you do not even need
to set environment variables to pass your EC2 credentials to the instance.((("Amazon EC2", "using IAM roles for EC2 credentials", id="ix_AECIAM")))((("Identity and Access Management (IAM) service", "using IAM roles for EC2 credentials", id="ix_IAMrole"))) Amazon's IAM roles let you define users and groups and
control what those users and groups are permitted to do with EC2 (e.g., get
information about your running instances, create instances, create images). You
can also assign IAM roles to running instances, so you can effectively say,
"This instance is allowed to start other instances."

When you make requests against EC2 by using a client program that supports IAM roles, and an instance is granted permissions by an IAM role, the client will fetch the credentials from the http://amzn.to/1Cu0fTl[EC2 instance metadata service] and use those to make requests against the EC2 service end point.

You can create an IAM role through the Amazon Web Services (AWS) Management Console, or at the command line by using
the AWS Command-Line Interface tool (http://aws.amazon.com/cli/[AWS CLI]).

=== AWS Management Console

Here's how to use the AWS Management Console to create an IAM role that has Power User Access, meaning((("Identity and Access Management (IAM) service", "using IAM roles for EC2 credentials", "creating IAM role with AWS Management Console")))((("AWS Management Console", "using to create IAM role with Power User Access", id="ix_AWSMC")))
that it is permitted to do pretty much anything with AWS except modify IAM
users and groups:

. Log in to the https://console.aws.amazon.com[AWS Management Console].
. Search for and then click IAM.
. Click "Roles at the left.
. Click the Create New Role button.
. Give your role a name and then click Next Step. I like to use `ansible` as the name for the role for my instance that will run Ansible.
. Under AWS Service Roles, select Amazon EC2.
. Search for and select PowerUserAccess, and then click Next Step.
. Click Create Role.


Once the role is created, if you select it and click Show Policy, you should
see a JSON document that looks like <<POLICY_DOCUMENT>>.


[[POLICY_DOCUMENT]]
.IAM power user policy document
====
[source,json]
----
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "NotAction": ["iam:*", "organizations:*"],
      "Resource": "*"
    },{
      "Effect": "Allow",
      "Action": "organizations:DescribeOrganization",
      "Resource": "*"
    }
  ]
}
----
====

When you create a role through the web interface, AWS also automatically creates
an _instance profile_ with the ((("instance profiles", "creating with AWS Management Console")))same name as the role (e.g., `ansible`), and
associates the role with the instance profile name. When you create an instance
with the +ec2+ module, if you pass the instance profile name as the
+instance_profile_name+ parameter, then the created instance will have the
permissions of that role.((("AWS Management Console", "using to create IAM role with Power User Access", startref="ix_AWSMC")))

=== Command-Line

You can also create the role and the instance profile by using the AWS CLI tool, but
it's a bit more work.((("AWS Command-Line Interface", "using to create IAM role and instance profile", id="ix_AWSCLI")))((("command-line interface (CLI)", "using AWS CLI to create IAM role", id="ix_CLIAWS")))((("Identity and Access Management (IAM) service", "using IAM roles for EC2 credentials", "creating IAM role with AWS CLI", id="ix_IAMroleCLI"))) You need to do the following:

. Create a role, specifying the trust policy. The trust policy describes the entities that can assume the role and the access conditions for the role.

. Create a policy that describes what the role is permitted to do. In our case, we want to create the equivalent of the power user, where the
role can perform any AWS-related action except manipulate IAM roles and
groups.

. Create an instance profile.

. Associate the role with the instance profile.

You'll need to create two IAM policy files first, which are in JSON format. The
trust policy is shown in <<TRUST_POLICY>>. This is the same trust policy that AWS
automatically generates when you create the role via the web interface.

The role policy that describes what the role is allowed to do is shown in
<<POWER_USER_POLICY>>.

[[TRUST_POLICY]]
.trust-policy.json
====
[source,json]
----
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "",
      "Effect": "Allow",
      "Principal": {
        "Service": "ec2.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}
----
====

[[POWER_USER_POLICY]]
.power-user.json
====
[source,json]
----
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "NotAction": "iam:*",
      "Resource": "*"
    }
  ]
}
----
====

<<CREATING_INSTANCE_PROFILE>> shows how to create an instance profile on the command line, after you've created ((("instance profiles", "creating on AWS command line")))the files shown in Examples pass:[<a href="#TRUST_POLICY">B-2</a> and <a href="#POWER_USER_POLICY">B-3</a>].



[[CREATING_INSTANCE_PROFILE]]
.Creating an instance profile at the command line
====
----
# Make sure that trust-policy.json and power-user.json are in the
# current directory, or change the file:// arguments to include the
# complete path

$ aws iam create-role --role-name ansible --assume-role-policy-document \
  file://trust-policy.json
$ aws iam put-role-policy --role-name ansible --policy-name \
  PowerUserAccess-ansible-20170214 --policy-document file://power-user.json
$ aws iam create-instance-profile --instance-profile-name ansible
$ aws iam add-role-to-instance-profile --instance-profile-name ansible \
  --role-name ansible

----
====

As you can see, it's much simpler to do this via the web interface, but if you
want to automate this, then you can use the command line instead. Check out the
http://docs.aws.amazon.com/IAM/latest/UserGuide[AWS Identity and Access Management User Guide] for more details on IAM.


Once you've created the instance profile, you can then launch an EC2 instance
with that instance profile. You can do this with the +ec2+ module by using the +instance_profile_name+ parameter:
[source,yaml+jinja]
----
- name: launch an instance with iam role
  ec2:
    instance_profile_name: ansible
    # Other parameters not shown
----

If you SSH into this instance, you can query the EC2 metadata service to confirm that
this instance is associated with the Ansible profile. The output should look
something like this:

----
$ curl http://169.254.169.254/latest/meta-data/iam/info
{
  "Code" : "Success",
  "LastUpdated" : "2014-11-17T02:44:03Z",
  "InstanceProfileArn" : "arn:aws:iam::549704298184:instance-profile/ansible",
  "InstanceProfileId" : "AIPAINM7F44YGDNIBHPYC"
}
----

You can also directly inspect the credentials, although it's not
something you need to do. The Boto library will
automatically retrieve these credentials when the Ansible +ec2+ modules or dynamic
inventory script executes:

----
$ curl http://169.254.169.254/latest/meta-data/iam/security-credentials/ansible
{
  "Code" : "Success",
  "LastUpdated" : "2015-02-09T21:45:20Z",
  "Type" : "AWS-HMAC",
  "AccessKeyId" : "ASIAIYXCUETJPY42AC2Q",
  "SecretAccessKey" : "ORp9gldiymIKH9+rFtWEx8BjGRteNTQSRnLnlmWq",
  "Token" : "AQoDYXdzEGca4AMPC5W69pvtENpXjw79oH9...",
  "Expiration" : "2015-02-10T04:10:36Z"
}
----

These credentials are temporary, and Amazon will rotate them automatically for
you.

You can now use this instance as your control machine, without needing to specify
your credentials via environment variables. The Ansible +ec2+ modules will
automatically retrieve the credentials from the metadata service.((("AWS Command-Line Interface", "using to create IAM role and instance profile", startref="ix_AWSCLI")))((("Identity and Access Management (IAM) service", "using IAM roles for EC2 credentials", "creating IAM role with AWS CLI", startref="ix_IAMroleCLI")))((("command-line interface (CLI)", "using AWS CLI to create IAM role", startref="ix_CLIAWS")))((("Amazon EC2", "using IAM roles for EC2 credentials", startref="ix_AECIAM")))((("Identity and Access Management (IAM) service", "using IAM roles for EC2 credentials", startref="ix_IAMrole")))


////
TODO: Describe assigning an IAM role here
////
